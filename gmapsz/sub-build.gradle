def zipnm = "zk-"
switch ( project.name ) {
    case "gmapsz":
        zipnm += "Gmaps"
        break
    case "ckez":
    	zipnm += "CKEditor"
        break
}
println project.name
def buildUri = "${buildDir}".substring(("${buildDir}".indexOf("/" + project.name + "/")) + project.name.length() + 2)
def isOfficial = project.hasProperty("target") && "official" == project.getProperty("target") ? true : ""
def fldate = isOfficial ? "" : new Date().format("yyyy-MM-dd")
version = isOfficial && version.contains("-FL") ? version.substring(0, version.indexOf("-FL")) : version
println isOfficial ? "official" : "FL" + " version: " + version + fldate ? "-" + fldate : ""
def jsSource = "src/main/resources/web/js/${project.name}"

sourceSets {
    main {
        java.srcDirs = ['build/generated/src/java']
    }
}

import org.apache.tools.ant.filters.ReplaceTokens
task sourcesForRelease() {
	doFirst {
		copy {
		    from "src/main/java"
		    into "${buildDir}/generated/src/java/"
		    filter(ReplaceTokens, tokens: ['projectVersion': version])
		}
		copy {
			from ("${project.projectDir}") {
				include "pom.xml"
			}
			into "${buildDir}/maven"
			filter(ReplaceTokens, tokens: ['projectVersion': version])
		}
	}
}

compileJava {
	dependsOn(sourcesForRelease)
	source += sourceSets.main.java
}

javadoc {
	options.addStringOption("Xdoclint:none", "--allow-script-in-comments")
	options.bottom("Copyright &amp;copy; 2005-2020 Potix Corporation. All Rights Reserved.")
	source = sourceSets.main.allJava
}

jar {
	archiveName project.name + ".jar"
	dependsOn 'copyLangAddon'
	dependsOn 'javadoc'
	dependsOn 'deleteFiles'
	dependsOn 'putBackExcludedFiles'
}

build {
	dependsOn 'sourceJar'
	dependsOn 'makeBinZip'
	dependsOn 'makeSrcZip'
	dependsOn 'zipOfficialBundle'
}

task preserveExcludedFiles() {
	doLast {
		jsCompressExcludedFiles.each { each ->
			//copy excluded files to a temporary folder
			copy {
				from jsSource
				include each
				into "${buildDir}/excludedFiles"
			}
			//delete the excluded files brfore compressing files
			delete fileTree(jsSource) {
		        include each
		    }
		}
		//restore included files inside excluded folders
		jsCompressIncludedFiles.each { each ->
			copy {
				from "${buildDir}/excludedFiles"
				include each
				into jsSource
			}
			delete fileTree("${buildDir}/excludedFiles") {
		        include each
		    }
		}
	}
}

task compressJs(type: JavaExec, dependsOn: preserveExcludedFiles) {
	main = "ZipJS"
	args("src/main/resources/web/js", "${buildDir}/resources/main/web/js", true)
	jvmArgs("-Xss1024k")
	classpath("dist/lib/ext/zkjszips.jar", "dist/lib/ext/yuicompressor.jar", "dist/lib/ext/commons-io.jar", "dist/lib/ext/closure-compiler.jar")
}

task zipJs(type: JavaExec, dependsOn: compressJs) {
	main = "ZipJS"
	args("src/main/resources/web/js", "${buildDir}/resources/main/web/js")
	jvmArgs("-Xss1024k")
	classpath("dist/lib/ext/zkjszips.jar", "dist/lib/ext/yuicompressor.jar", "dist/lib/ext/commons-io.jar", "dist/lib/ext/closure-compiler.jar")
}

task putBackExcludedFiles(dependsOn: zipJs) {
	doLast {
		copy {
			from "${buildDir}/excludedFiles"
			into "${buildDir}/resources/main/web/js/${project.name}"
		}
		copy {
			from "${buildDir}/excludedFiles"
			into jsSource
		}
	}
}

task deleteFiles(dependsOn: zipJs) {
	doLast {
	    delete {
	    	delete fileTree("${buildDir}/resources") {
		        include "**/*.js.map"
		    }
	    }
	}
}

task copyLangAddon() {
	doFirst {
		copy {
			from "src/main/resources/metainfo"
			into "${buildDir}/resources/main/metainfo"
		}
	}
}

task sourceJar(type: Jar) {
	dependsOn 'sourcesForRelease'
	outputs.upToDateWhen { false }
	doFirst {
		from sourceSets.main.java
		archiveName project.name + "-sources.jar"
	}
}

task prepareFiles {
	dependsOn 'jar'
	dependsOn 'sourceJar'
	doFirst {
		def name = project.name
		def fl = fldate.trim() ? "-" + fldate : ""
		def binFolderName = zipnm + "-bin-" + version + fl
		def srcFolderName = zipnm + "-src-" + version + fl
		copy {
			from "${buildDir}/libs/" + name + "-sources.jar"
			into "${buildDir}/binzip/" + binFolderName + "/dist/src"
		}
		copy {
			from "${buildDir}/libs/" + name + ".jar"
			into "${buildDir}/binzip/" + binFolderName + "/dist/lib"
		}
		copy {
			from "../zkdoc"
			into "${buildDir}/binzip/" + binFolderName + "/doc"
		}
		copy {
			from "${buildDir}/docs"
			into "${buildDir}/binzip/" + binFolderName
		}
		copy {
			from ("../${project.name}/") {
				exclude(buildUri)
				exclude("dist")
			}
			into "${buildDir}/srczip/" + srcFolderName + "/${project.name}/"
		}
		copy {
			from "../zkdoc"
			into "${buildDir}/srczip/" + srcFolderName + "/doc"
		}
	}
}

task makeBinZip(type: Zip, dependsOn: prepareFiles) {
	appendix "bin"
	baseName zipnm
	classifier fldate
	from("${buildDir}/binzip/")
	destinationDir(file("${buildDir}/distributions/zk"))
}

task makeSrcZip(type: Zip, dependsOn: prepareFiles) {
	appendix "src"
	baseName zipnm
	classifier fldate
	from("${buildDir}/srczip/")
	destinationDir(file("${buildDir}/distributions/zk"))
}

task prepareBundleFilesForOfficialRelease(dependsOn: ['makeBinZip', 'makeSrcZip']) {
	doLast {
		if (!fldate.trim()) {
			copy {
				from "${buildDir}/libs/"
				into "${buildDir}/maven/"
				rename { String fileName ->
					fileName.replace("${project.name}", "${project.name}-${version}")
				}
			}
		}
	}
}

task zipOfficialBundle(type: Zip, dependsOn: prepareBundleFilesForOfficialRelease) {
	if (!fldate.trim()) {
		println "Create ${project.name}-" + version + "-bundle.jar"
		baseName "${project.name}"
		classifier "bundle"
		from("${buildDir}/maven/")
		destinationDir(file("${buildDir}/distributions/maven"))
	}
}

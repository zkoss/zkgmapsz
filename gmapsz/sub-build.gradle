def zipnm = "zk-"
switch ( project.name ) {
    case "gmapsz":
        zipnm += "Gmaps"
        break
    case "ckez":
    	zipnm += "CKEditor"
        break
}
println project.name
def buildUri = "${buildDir}".substring(("${buildDir}".indexOf("/" + project.name + "/")) + project.name.length() + 2)
def isOfficial = project.hasProperty("target") && "official" == project.getProperty("target") ? true : ""
version = isOfficial && version.contains("-FL") ? version.substring(0, version.indexOf("-FL")) : version
def fldate = isOfficial ? "" : new Date().format("yyyy-MM-dd")
def versionString = isOfficial ? version : "${version}-${fldate}"
println ((isOfficial ? "official" : "FL") + " version: " + versionString)

processResources {
	exclude '**/web/js' // Handled by zipJs
}

javadoc {
	options.addStringOption("Xdoclint:none", "--allow-script-in-comments")
	options.bottom("Copyright &amp;copy; 2005-${new Date().format("yyyy")} Potix Corporation. All Rights Reserved.")
}

jar {
	archiveName project.name + ".jar"
	dependsOn 'zipJs'
}

build {
	dependsOn 'sourceJar'
	dependsOn 'makeBinZip'
	dependsOn 'makeSrcZip'
	dependsOn 'makeBundle'
}

task zipJs(type: JavaExec) {
	classpath("dist/lib/ext/zkjszips.jar")
	args("src/main/resources/web/js", "${buildDir}/resources/main/web/js")
	jvmArgs("-Xss1024k")
}

task sourceJar(type: Jar) {
	outputs.upToDateWhen { false }
	doFirst {
		from sourceSets.main.java
		archiveName project.name + "-sources.jar"
	}
}

task prepareFiles {
	dependsOn 'javadoc'
	dependsOn 'jar'
	dependsOn 'sourceJar'
	doFirst {
		def name = project.name
		def binFolderName = zipnm + "-bin-" + versionString
		def srcFolderName = zipnm + "-src-" + versionString
		copy {
			from "${buildDir}/libs/" + name + "-sources.jar"
			into "${buildDir}/binzip/" + binFolderName + "/dist/src"
		}
		copy {
			from "${buildDir}/libs/" + name + ".jar"
			into "${buildDir}/binzip/" + binFolderName + "/dist/lib"
		}
		copy {
			from "../zkdoc"
			into "${buildDir}/binzip/" + binFolderName + "/doc"
		}
		copy {
			from "${buildDir}/docs"
			into "${buildDir}/binzip/" + binFolderName
		}
		copy {
			from ("../${project.name}/") {
				exclude(buildUri)
				exclude("dist")
				exclude(".gradle")
			}
			into "${buildDir}/srczip/" + srcFolderName + "/${project.name}/"
		}
		copy {
			from "../zkdoc"
			into "${buildDir}/srczip/" + srcFolderName + "/doc"
		}
	}
}

task makeBinZip(type: Zip, dependsOn: prepareFiles) {
	appendix "bin"
	baseName zipnm
	classifier fldate
	from("${buildDir}/binzip/")
	destinationDir(file("${buildDir}/distributions/zk"))
}

task makeSrcZip(type: Zip, dependsOn: prepareFiles) {
	appendix "src"
	baseName zipnm
	classifier fldate
	from("${buildDir}/srczip/")
	destinationDir(file("${buildDir}/distributions/zk"))
}

task prepareBundleFiles(dependsOn: ['jar', 'sourceJar']) {
	doLast {
		copy {
			from "${buildDir}/libs/"
			from ("${project.projectDir}") {
				include "pom.xml"
			}
			into "${buildDir}/maven/"
			rename { String fileName ->
				fileName.replace("${project.name}", "${project.name}-${versionString}")
			}
		}
	}
}

task makeBundle(type: Jar, dependsOn: prepareBundleFiles) {
	doLast {
		println "Create ${project.name}-" + versionString + "-bundle.jar"
	}
	baseName "${project.name}"
	version versionString
	classifier "bundle"
	from("${buildDir}/maven/")
	destinationDir(file("${buildDir}/distributions/maven"))
}
